# Runs the release workflow when a release-* branch is pushed
# - Bump version
# - Build -> Test -> Publish
# Tag -> Open PR to main - Push

name: Create Release

on:
  push:
    branches:
      - 'release-v*'
  pull_request:
    branches:
      - 'dev'

env:
  GITHUB_USER: "${{ github.actor }}"

jobs:
  release-flow:
    runs-on:
      ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Prepare Environment
        id: set_environment
        run: |
          set -e
          # Ensure enough space is available for build
          sudo apt-get autoremove -y
          sudo apt-get clean -y
          # Exporting the Environment variables.
          # This way we don't need the context access.
          echo "GITHUB_USER=${{ env.GITHUB_USER }}" >> $GITHUB_ENV
          echo "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
          #Check if this was triggered by a PR to dev and not actual release
          if [[ "$GITHUB_EVENT_NAME" = 'pull_request' && "$GITHUB_BASE_REF" = 'dev' ]] ; then
            echo "Running release CI, setting mock release version"
            RELEASE_VERSION="v0.001"
            # Workaround because when running in act GITHUB_REF_NAME is the name of the PR
            BRANCH=$(git rev-parse --abbrev-ref HEAD)
            DATETIME="$(date +'%Y-%m-%d-%H-%M-%S')"
            _GITHUB_REF_NAME="act-${BRANCH}-${DATETIME}"
            _GITHUB_BASE="act-main"
            MOCK_MAIN_EXISTS=$(git ls-remote --heads origin --refs $_GITHUB_BASE | wc -l)
            if [ $MOCK_MAIN_EXISTS != 0] ; then
              echo "Removing old act-main branch"
              git push origin --delete "$_GITHUB_BASE"
            fi
            echo "Creating act-main from main branch"
            git fetch origin main
            git checkout -b act-main origin/main
            echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV
          else
            _GITHUB_BASE="act-main"
            _GITHUB_REF_NAME="${{ github.ref_name }}"
          fi
          echo "_GITHUB_REF_NAME=${_GITHUB_REF_NAME}" >> $GITHUB_ENV
          echo "_GITHUB_BASE=${_GITHUB_BASE}" >> $GITHUB_ENV
          echo "GITHUB_EVENT: ${{ github.event }}"
          echo "GITHUB_EVENT_NAME: ${{ github.event_name }}"
          echo "GITHUB_EVENT_REF: ${{ github.event.ref }}"
          echo "GITHUB_REF: ${{ github.ref }}"
          echo "GITHUB_REF_NAME: ${{ github.ref_name }}"
          echo "GITHUB_REF_TYPE: ${{ github.ref_type }}"
          echo "GITHUB_HEAD_REF: ${{ github.head_ref }}"
          echo "GITHUB_BASE_REF: ${{ github.base_ref }}"
          echo "GITHUB_ACTIONS: ${{ github.action }}"
          echo "GITHUB_EVENT_PATH content"
          echo "printenv"
          printenv | grep GITHUB_
          cat $GITHUB_EVENT_PATH

      - name: Get release version
        run: |
          echo "Retrieve the Release Version"
          if [[ -z "$RELEASE_VERSION" ]] ; then
            echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV
            RELEASE_VERSION=$(echo "$GITHUB_REF" | grep -oP "(?<=^refs/heads/release-)v[0-9]+\.[0-9]+")
            # Check if Version is retrieved correctly
            if [[ -z "$RELEASE_VERSION" || ! "$RELEASE_VERSION" =~ ^v[0-9]+\.[0-9]+$ ]]; then
              echo "RELEASE_VERSION is not set"
              exit 1
            else
              echo "RELEASE_VERSION is set to $RELEASE_VERSION"
              echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV
            fi
          else
            echo "Running release CI, setting mock release version is used"
          fi

      - name: Bump version
        run: |
          echo "Release version: $RELEASE_VERSION" > release.txt
          date +%s >> release.txt

      - name: Setup Github CLI
        if: ${{ env.ACT }}
        run: |
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y

      - name: Create PR to main
        run: |
          set -e
          echo "Open PR to main"
          gh --version
          # curl --request GET --url "https://api.github.com/octocat" --header "Authorization: Bearer $GITHUB_TOKEN" --header "X-GitHub-Api-Version: 2022-11-28"
          # Configure git and Push updates
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git config --global user.name 'github-actions[bot]'
          git config pull.rebase false
          message="Update Release Branch for ${RELEASE_VERSION}"
          if [[ "$GITHUB_EVENT_NAME" == 'pull_request' && "$GITHUB_BASE_REF" == 'dev' ]] ; then
            echo "Branch: $_GITHUB_REF_NAME"
            git switch -c "$_GITHUB_REF_NAME"
            git fetch
            git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}
          fi
          git add release.txt
          git commit -m "$message"
          git push --set-upstream origin "$_GITHUB_REF_NAME"
          gh pr create \
            --head ${_GITHUB_REF_NAME} \
            --base ${_GITHUB_BASE} \
            --title "$message" \
            --body 'Created by Github action'

      - name: Test
        run: |
          echo "Printing some ENV Vars for testing"
          echo "Github ref -------------------"
          echo "GITHUB_REF: ${{ github.ref }}"
          echo "GITHUB_REF_NAME: ${{ github.ref_name }}"
          echo "GITHUB_REF_TYPE: ${{ github.ref_type }}"
          echo "GITHUB_HEAD_REF: ${{ github.head_ref }}"
          echo "GITHUB_BASE_REF: ${{ github.base_ref }}"
          echo "\n"
          echo "Github event -------------------"
          echo "GITHUB_EVENT_NAME: ${{ github.event }}"
          echo "GITHUB_EVENT_NAME: ${{ github.event_name }}"
          echo "GITHUB_EVENT_PATH: ${{ github.event_name }}"
          echo "GITHUB_EVENT_REF: ${{ github.event.ref }}"
          echo "\n"
          echo "GITHUB_REPOSITORY: ${{ github.repository }}"
          echo "GITHUB_ACTION: ${{ github.action }}"
          echo "GITHUB_ACTOR: ${{ github.actor }}"
          echo "GITHUB_JOB: ${{ github.job }}"
          echo "GITHUB_RUN_ID: ${{ github.run_id }}"
          echo "GITHUB_RUN_NUMBER: ${{ github.run_number }}"
          echo "GITHUB_SHA: ${{ github.sha }}"
          echo "GITHUB_WORKFLOW: ${{ github.workflow }}"
          echo "GITHUB_ENV: ${{ github.env }}"
          echo "Release version: $RELEASE_VERSION"
